#!/usr/bin/perl

# Klompen - Static blog generation system.
# Copyright (C) 2011 by Tamber Penketh <tamber@furryhelix.co.uk>

# Permission to use, copy, modify, and distribute this software for
# any purpose with or without fee is hereby granted, provided that the
# above copyright notice and this permission notice appear in all
# copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM
# DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL
# INTERNET SOFTWARE CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
# RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF
# CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use utf8;
use strict;
use warnings;

use JSON qw(decode_json encode_json);
use File::Path qw(make_path);
use Klompen;
use Klompen::Post;
use Klompen::Site;
use Klompen::Archive;
use Klompen::Index;

# Read configuration file
my $config;
{
    my $config_fh;
    my $config_jsn;
    open($config_fh, "<:encoding(UTF-8)", "klompen.cfg") 
	|| die "Could not open configuration file";

    local $/=undef;
    $config_jsn = <$config_fh>;
    close($config_fh);
    Klompen::config_set(decode_json($config_jsn));
}

Klompen::read_state;

print STDERR "Attempting to generate all posts in source directory " . Klompen->conf_input_directory() . "\n";
# Create directory tree
make_path(Klompen->conf_output_directory(), Klompen->conf_output_directory() . Klompen->conf_path_archives(), Klompen->conf_output_directory() . Klompen->conf_path_tags());
# Generate all the things!
foreach(Klompen::list_available_posts()){
    if($_ eq "-1"){
	print STDERR "Could not find posts. Aborting.\n";
	exit();
    }
    print "Generating: $_ \n";
    Klompen::Post::generate(Klompen->conf_input_directory() . '/' . $_);
}

# Generate the archive page.
Klompen::Archive::generate;
# Generate the tag archive pages.
Klompen::Archive::generate_tag_archive;
# Generate the archive index.
Klompen::Index::generate();

Klompen::write_state;
